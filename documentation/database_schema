
n users {

	username: String
	emails: Array
	service: Object // password
	createAt: Date
	share_location: Boolean
	credit: Number
	allow_friends_recommendation: Boolean

	UserProfile {

  	profile_seed: String,

		friends_request: Array of user_id (String)

		recommended_friends: Array of Object // prompt users to find new friends
		{
			user_id:

		}

		turndownFriends: Array of Object // user turn down the friend request {
			userId
			validThru
		}

		Friends: Array of Object{
			user_id: String
			nickname: String
		} // userid

		Stranger: Object // {
			user_id, recent stranger chat
			validThru: Date
		}

		joined_tags: Array // tag object : {
			tagid: String,
			validThru: Date
		}

		recent_tags: Array // history object : {
			tagid: String,
			latitude: Number,
			longtitude: Number,
			time: Date
		}

		social_media: Object : {
			facebook: url (String),
			linkedIn: url (String),
			github: url (String)
		}
 	}
}

collection pwdToken {

	_id: String,
	userid: String,
	validThru: Date
}



collection settings{

	smtpAddress: String
	smtpPort: String
	smtpUsername: String
	smtpPassword: String
	smtpAuthentication: String
}


collection profile_img {

	img_url: String
	isUsed: Boolean
	user_id: String
}


collection chat_history {

	is_public: Boolean, // if in chatroom
	sender: user_id (String),
	sender_profile: String (copy from User collection)
	receiver: user_id or tag_id,
	message: String
	time: Date
	rate: Number
}


collection tag {

	Wifis: Array of wifi_id (String)
	connected_users: Array of user_id (String)
	start_time: String
	end: String
	Repeat: Array of String // store Mon, Wed, etc
}

collection wifis{

	ssid:
	mac address:
	active_tags: Array of tag_id (String)

}
